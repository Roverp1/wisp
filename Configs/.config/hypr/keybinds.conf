## █▄▀ █▀▀ █▄█ █▄▄ █ █▄░█ █▀▄ █ █▄░█ █▀▀ █▀
## █░█ ██▄ ░█░ █▄█ █ █░▀█ █▄▀ █ █░▀█ █▄█ ▄█

# Grouping of binds for easier management
#  $d=[Group Name|Subgroup Name1|Subgroup Name2|...]
# '$d' is a variable that is used to group binds together (or use another variable)
# This is only for organization purposes and is not a defined hyprland variable
# What we did here is to modify the Description of the binds to include the group name
# The $d will be parsed as a separate key to be use for a GUI or something pretty
# [Main|Subgroup1|Subgroup2|...]
# Main - The main groupname
# Subgroup1.. - The subgroup names can be use to avoid repeating the same description


#*  Variables 
# Default if commented out
$mainMod = Super
# Assign apps
$TERMINAL = kitty
$EDITOR = nvim
# $EXPLORER = dolphin
$BROWSER = zen

$wm=Window Management
$d=[$wm]
bindd = $mainMod, Q, $d close focused window, killactive
bindd = $mainMod Ctrl Shift, Q, $d kill window, exec, hyprctl kill
# bindd = $mainMod, Delete, $d kill hyprland session, exec, hyde-shell logout
bindd = $mainMod, E, $d Toggle floating, togglefloating
bindd = $mainMod, G, $d toggle group, togglegroup
bindd = $mainMod, F, $d toggle fullscreen, fullscreen, 1
bindd = $mainMod Shift, F, $d toggle full fullscreen, fullscreen, 0
# bindd = $mainMod, P, $d toggle pin on focused window, exec, $scrPath/windowpin.sh
bindd = $mainMod, P, $d toggle pin on focused window, pin
# bindd = Control Alt, Delete, $d logout menu, exec, $scrPath/logoutlaunch.sh
# bindd = $mainMod Alt_R Control_R, R, $d toggle waybar and reload config, exec, hyde-shell waybar --hide # TODO: need to change keybind
# bindd = ALT_R, Control_R,toggle waybar, exec, killall waybar || waybar # toggle waybar without reloading, this is faster

$d=[$wm|Group Navigation]
bindd = $mainMod Control, Semicolon, $d change active group backwards   , changegroupactive, b
bindd = $mainMod Control, Apostrophe, $d change active group forwards  , changegroupactive, f

$d=[$wm|Change focus]
bindd = $mainMod, L, $d focus left, movefocus, r
bindd = $mainMod, H, $d focus right , movefocus, l
bindd = $mainMod, K, $d focus up , movefocus, u
bindd = $mainMod, J , $d focus down, movefocus, d
bindd = $mainMod, Semicolon, $d select previous window, cyclenext, prev
bindd = $mainMod, Apostrophe, $d select next window, cyclenext,

$d=[$wm|Resize Active Window(resize submap)]
# Resize windows
bind = $mainMod, R, submap, resize # Initialize submap "resize"
submap = resize # will start a submap called "resize"

bindde = , l, $d resize window right, resizeactive, 10 0
bindde = , h, $d resize window left, resizeactive, -10 0
bindde = , k, $d resize window up, resizeactive, 0 -10
bindde = , j, $d resize window down, resizeactive, 0 10
bindd = , escape, $d reset submap, submap, reset # reset map to go back to the global submap

submap = reset # will reset the submap, which will return to the global submap

# Move active window around current workspace with mainMod + Shift + HJKL
$d=[$wm|Move active window across workspace]
$moveactivewindow=grep -q "true" <<< $(hyprctl activewindow -j | jq -r .floating) && hyprctl dispatch moveactive
bindde = $mainMod Shift, L, Move active window to the right, exec, $moveactivewindow 30 0 || hyprctl dispatch movewindow r
bindde = $mainMod Shift, H, Move active window to the left, exec, $moveactivewindow -30 0 || hyprctl dispatch movewindow l
bindde = $mainMod Shift, K, Move active window up, exec, $moveactivewindow  0 -30 || hyprctl dispatch movewindow u
bindde = $mainMod Shift, J, Move active window down, exec, $moveactivewindow 0 30 || hyprctl dispatch movewindow d

# Move/Resize focused window
$d=[$wm|Move & Resize with mouse]
binddm = $mainMod, mouse:272, $d hold to move window, movewindow
binddm = $mainMod, mouse:273, $d hold to resize window, resizewindow

# Toggle focused window split
$d=[$wm]
bindd = $mainMod, Z, $d toggle split, togglesplit

$l=Launcher
$d=[$l|Apps]
bindd = $mainMod, Return, $d terminal emulator , exec, $TERMINAL
bindd = $mainMod, B, $d web browser , exec, $BROWSER
bindd = Super+Shift, V, $d volume control, exec, pkill pavucontrol || pavucontrol

$d=[$l|Rofi menus]
bindd = $mainMod, SPACE, $d application finder , exec, pkill -x rofi || rofi -show drun


$hc=Hardware Controls
$d=[$hc|Audio]
binddl  = , XF86AudioMute,$d  toggle mute output, exec, wpctl set-mute @DEFAULT_SINK@ toggle # toggle audio mute
binddl  = , XF86AudioMicMute,$d un/mute microphone  , exec, wpctl set-mute @DEFAULT_SOURCE@ toggle # toggle microphone mute
binddle = , XF86AudioRaiseVolume, $d increase volume , exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 2%+ # increase volume
binddle = , XF86AudioLowerVolume, $d decrease volume , exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 2%- # decrease volume

$d=[$hc|Media]
binddl  = , XF86AudioPlay,$d play media, exec, playerctl play-pause # toggle between media play and pause
binddl  = $mainMod Shift, P, $d play-pause media, exec, playerctl play-pause
binddl  = , XF86AudioPause,$d pause media, exec, playerctl play-pause # toggle between media play and pause
binddl  = , XF86AudioNext,$d next media  , exec, playerctl next # media next
binddl  = $mainMod Shift, N, $d next media, exec, playerctl next
binddl  = , XF86AudioPrev,$d  previous media , exec, playerctl previous # media previous
binddl  = $mainMod Shift, B, $d previous media, exec, playerctl next

$d=[$hc|Brightness]
binddle = , XF86MonBrightnessUp, $d increase brightness , exec, brightnessctl s 5%+ # increase brightness
binddle = , XF86MonBrightnessDown, $d decrease brightness , exec, brightnessctl s 5%- # decrease brightness


$ut=Utilities
$d=[$ut]
# binddl = $mainMod, K, $d toggle keyboard layout , exec, $scrPath/keyboardswitch.sh # switch keyboard layout
bindd = $mainMod Alt, G, $d game mode , exec, $scrPath/gamemode.sh # disable hypr effects for gamemode

$d=[$ut|Screen Capture]
bindd = $mainMod Shift, P, $d color picker, exec, hyprpicker -an # Pick color (Hex) >> clipboard#
bindd = $mainMod Shift, S, $d freeze and snip screen, exec, $scrPath/screenshot.sh sf # partial screenshot capture (frozen screen)
binddl = $mainMod Alt, S, $d print monitor , exec, $scrPath/screenshot.sh m # monitor screenshot capture
binddl = , Print, $d print all monitors , exec, $scrPath/screenshot.sh p # all monitors screenshot capture



$ws=Workspaces
$d=[$ws|Navigation]
bindd = $mainMod, 1, $d navigate to workspace 1 , workspace, 1
bindd = $mainMod, 2, $d navigate to workspace 2 , workspace, 2
bindd = $mainMod, 3, $d navigate to workspace 3 , workspace, 3
bindd = $mainMod, 4, $d navigate to workspace 4 , workspace, 4
bindd = $mainMod, 5, $d navigate to workspace 5 , workspace, 5
bindd = $mainMod, 6, $d navigate to workspace 6 , workspace, 6
bindd = $mainMod, 7, $d navigate to workspace 7 , workspace, 7
bindd = $mainMod, 8, $d navigate to workspace 8 , workspace, 8
bindd = $mainMod, 9, $d navigate to workspace 9 , workspace, 9
bindd = $mainMod, 0, $d navigate to workspace 10 , workspace, 10

$d=[$ws|Navigation|Relative workspace]
bindd = $mainMod Shift, Semicolon, $d change active workspace forwards  , workspace, r+1
bindd = $mainMod Shift, Apostrophe, $d change active workspace backwards , workspace, r-1

$d=[$ws|Navigation]
bindd = $mainMod Control, L, $d navigate to the nearest empty workspace , workspace, empty
bindd = $mainMod, Tab, $d switch to the last workspace, workspace, previous

# Move focused window to a workspace
$d=[$ws|Move window to workspace]
bindd = $mainMod Shift, 1, $d move to workspace 1 , movetoworkspacesilent, 1
bindd = $mainMod Shift, 2, $d move to workspace 2 , movetoworkspacesilent, 2
bindd = $mainMod Shift, 3, $d move to workspace 3 , movetoworkspacesilent, 3
bindd = $mainMod Shift, 4, $d move to workspace 4 , movetoworkspacesilent, 4
bindd = $mainMod Shift, 5, $d move to workspace 5 , movetoworkspacesilent, 5
bindd = $mainMod Shift, 6, $d move to workspace 6 , movetoworkspacesilent, 6
bindd = $mainMod Shift, 7, $d move to workspace 7 , movetoworkspacesilent, 7
bindd = $mainMod Shift, 8, $d move to workspace 8 , movetoworkspacesilent, 8
bindd = $mainMod Shift, 9, $d move to workspace 9 , movetoworkspacesilent, 9
bindd = $mainMod Shift, 0, $d move to workspace 10 , movetoworkspacesilent, 10

# Move focused window to a relative workspace
$d=[$ws]
bindd = $mainMod Control+Alt, Right, $d move window to next relative workspace , movetoworkspace, r+1
bindd = $mainMod Control+Alt, Left, $d move window to previous relative workspace , movetoworkspace, r-1


# Scroll through existing workspaces
$d=[$ws|Navigation]
bindd = $mainMod, mouse_down, $d next workspace, workspace, e+1
bindd = $mainMod, mouse_up, $d previous workspace, workspace, e-1



$d=#! unset the group name
